
import sys
import os
from os import path

app_location = path.abspath(path.normpath(path.dirname(sys.argv[0])))
sys.path.insert(0, app_location)

import sitegen
class Dummy_Options(object):
    enable_warnings = False
sitegen.options = Dummy_Options

header = '''"""
    Test configuration descriptions for mira.
    Generated by mk_mira.py -- DO NOT EDIT!.
"""

import os
from os import path
from glob import glob

from configurations import Isabelle as isabelle


def run_afp_sessions(env, case, paths, dep_paths, playground, session, keep_result):

    (loc_afp, loc_isabelle) = paths
    (dep_isabelle,) = dep_paths
    isabelle.prepare_isabelle_repository(loc_isabelle, env.settings.contrib, dep_isabelle,
      parallelism = False) # FIXME -- parallelism off is only due to lxlabbroy machines
    os.chdir(loc_afp)

    loc_images = glob(dep_isabelle + '/*')
    if len(loc_images) != 1:
        raise Exception('Bad Isabelle image path: %s' % loc_images)
    loc_image = loc_images[0] + '/'

    (return_code, log) = env.run_process('admin/testall', '-t',
        path.join(loc_isabelle, 'bin', 'isabelle'), session,
        ISABELLE_IMAGE_PATH = loc_image)

    result = path.join(p, 'heaps') if keep_result else None

    return (return_code == 0, isabelle.extract_isabelle_run_summary(log),
      {'timing': isabelle.extract_isabelle_run_timing(log)}, {'log': log}, result)
'''

entries = sitegen.parse(os.path.join(app_location, os.pardir, 'metadata', 'metadata'))

def afp_name(s):

    return 'AFP_' + s.replace('-', '_').replace('+', 'plus')

def simple_dep_of_base(s):

    if s == 'HOL':
        return 'HOL', [1]
    elif s == 'HOL/HOL-Nominal':
        return 'HOL_Nominal', [1]
    elif s == 'HOL/HOL-Word':
        return 'HOL_Word', [1]
    elif s == 'HOLCF':
        return 'HOL_HOLCF', [1]
    else:
        _, session = s.split('/', 2)
        return session, [0, 1]

def dep_of_simple_dep((s, k)):

    if k == [1]:
        return 'isabelle.' + s, k
    else:
        return afp_name(s), k

has_child = set()
deps = {}
for name in entries:
    base = entries[name]['base']
    simple_dep = simple_dep_of_base(base)
    if simple_dep[1] == [0, 1]:
        has_child.add(simple_dep[0])
    deps[name] = dep_of_simple_dep(simple_dep)

writer = open(path.join(app_location, 'mira.py'), 'wb')

def writeln(s = ''): writer.write(s + '\n')

writeln(header)

for name in entries:
    writeln('@configuration(repos = [AFP, Isabelle], deps = [(%s, %s)])' % deps[name])
    writeln('def %s(env, case, paths, dep_paths, playground):' % afp_name(name))
    writeln('    """AFP %s session"""' % name)
    writeln("    return run_afp_sessions(env, case, paths, dep_paths, playground, '%s', %s)"
      % (name, name in has_child))
    writeln()

writeln('@configuration(repos = [AFP, Isabelle], deps = [')
for name in sorted(entries):
    if name in ['JinjaThread', 'Flyspeck-Tame']:
        continue
    writeln('    (%s, [0, 1]),' % afp_name(name))
writeln('  ])')
writeln('def AFP_almost_all(*args):')
writeln('    """All AFP sessions except JinjaThreads and Flyspeck-Tame"""')
writeln("    return (True, 'ok', {}, {}, None)")

writer.close()
