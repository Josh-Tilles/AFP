Readme for sitegen.py script
============================

Dependencies: Python 2 (tested with Python 2.6)

This script reads a metadata file and generates the topics.shtml,
index.shtml and the entry pages on afp.sf.net.

How to add a theory (Quick-start guide)
=======================================

We're assuming you want to contribute a proof. Just copy the folder
into the 'thys' directory as usual. Now, follow these steps (the last
step is really important):

1. Have a look at http://afp.sourceforge.net/topics.shtml and find
   an appropriate category for your proof.

2. Suppose, you have copied your proof to 'thys/MyProof', and your
   topic is 'Distributed' in subsection 'Algorithms' in section
   'Computer Science'.

3. Open the file 'metadata/metadata' and add the following lines
   (comments start with ';'):

   [MyProof]
   title = Proving my proof
   topic = Computer Science/Algorithms/Distributed
   date = 2010-03-06
   author = Jean Dupont <mailto:jean.dupont@example.org>, John Doe <www.example.org/~doe>
   base = HOLCF
   abstract = This proof ... <i>HTML formatting</i>
     ...continuing on the second line

   The section header and the keys must not contain leading whitespaces.
   When continuing a value on a second line, this and the following lines must
   be preceded by a whitespace. The date is the submission date of the entry.

   If you've chosen multiple topics, you can comma-separate them.
   The key 'base' can be omitted if you simply use HOL (which is the
   default).

4. Make sure that you are in the root of the repository. Now, run

   $ admin/sitegen.py --dest=web metadata
   
   which will generate the appropriate files in the 'web' directory.

5. IMPORTANT: Before commiting, make sure everything is fine.

   $ hg status
   
   should only show these files as modified:

   M metadata/metadata
   M web/index.shtml
   M web/topics.shtml
   ? thys/MyProof/...
   ? web/entries/MyProof.shtml
   
   Also, have a look at the diffs:
   
   $ hg diff web/*.shtml
   
   should have only two modifications for your new entry. Also, it
   is a good idea to look at 'web/entries/MyProof.shtml' with a web
   browser. Don't worry that the layout is broken, just look at the
   content. Now, we're ready for commiting:

   $ hg add .
   $ hg commit
   $ hg push
   
   That's it.
   
Detailed description
====================

Metadata format
---------------

We're using a simple INI-like format for configuration
files.

  * File 'metadata'

    Master storage for entry metadata. Format:

    [<short-name>]
    topic = <topic>/<subtopic>/..., <topic2>/...
    title = <title>
    date = <YYYY>-<MM>-<HH>
    base = <base-theory>
    author = <author1> [<<url1>>], <author2> ...
    abstract = <text>

    Example:

    [Presburger-Automata]
    topic = Computer Science/Automata, Logic
    title = Formalizing the Logic-Automaton Connection
    date = 2009-12-03
    base = HOL
    author = Stefan Berghofer <http://www.in.tum.de/~berghofe>, Markus Reiter
    abstract = This abstract has
      multiple lines ...

    The section name (<short-name> in this terminology) must correspond to
    the folder name in 'thys' directory. This short name is used as entry
    identifier during the whole process.

    The key 'base' can be omitted. In this case, the script assumes 'HOL'.
    If the entry uses e. g. HOLCF, you have to specify that explicitly as
    this information is used to generate the links.

    Currently, only three levels of topics and subtopics are allowed, but
    you may specify as many topics as you wish. If multiple topics are
    specified, the entry will appear under each of them. Note that the
    short name must be the same as their name in the 'thys' folder.

    For each author, you may provide an URI (either a web page or a mail
    address, the latter prepended with 'mailto:') in standard <protocol:uri>
    notation.
    
    If you want to have some additional text fields like 'Note' or 'Change
    history' below the 'Abstract' column, you can use the 'extra' facility:
    
    extra-<key> = <heading>: <text>
    
    where <key> denotes an identifier (most cases 0, 1, ...) unique for each
    entry. The particular <key> has no impact on output and is solely used for
    disambiguating multiple extra fields.
    
    Example:
    
    extra-0 = Warning: Untested...
    extra-1 = History: [2010-01-01] new year

    There is another special treatment at the moment: Some entries have a custom
    format, e. g. InformationFlowSlicing, which contains multiple proofs, or
    Valuation which doesn't contain a proof document. For these entries, no entry
    file should be generated, but they should be listed on index and topics page.
    These entries have another pair 'ignore = entry' in the metadata file which
    simply means 'don't generate template 'entry.tpl' for this entry'.

  * File 'release-dates'
  
    To list the older releases, a mapping between date and Isabelle version
    is necessary.
    Format:
    
    <isabelle-version> = <release-date>
    
    Example:
    
    2003 = 2003-05-13
    2004 = 2004-04-19
    
    So, all tarballs between 2003-05-13 (inclusive) and 2004-04-19 (exclusive)
    will be treated as older release for 'Isabelle 2003'.
    
  * File 'releases'
  
    Auto-generated file from the publishing scripts (currently not implemented).
    Contains a list of all released tarballs, except the 'current' symlinks and
    the 'devel' versions. The youngest release is always ignored, so don't forget
    to add new releases when a new Isabelle version has been added to the 
    'release-dates' file.
    
    Example:
    
    afp-AVL-Trees-2009-04-29.tar.gz
    afp-Abstract-Hoare-Logics-2007-11-27.tar.gz
    afp-Abstract-Hoare-Logics-2008-06-10.tar.gz

Metadata directory
------------------

The metadata file resides in this folder, additionally to the HTML template
files. Currently, the script supports generation of '*.shtml' files, if a
corresponding '*.tpl' file is located in the metadata folder. Each '*.tpl'
file should contain a line

  <!--gen-->
  
or

  <!--gen:param-->

which will be replaced by the output of a so-called generator function. The
appropriate function is inferred from the filename of the template and the
corresponding configuration in the script. Some generators (at the moment,
only for 'entry.tpl') require a parameter which denotes which subpart of the
page should be rendered. For available parameters, consult the comments in
the script.

In most cases, you don't have to change these generator lines.

Invocation
----------

When invoking without arguments, the following help is displayed:

  Usage: sitegen.py [--no-warn] [--debug] [--check=THYS_DIR | --dest=DEST_DIR] metadata-dir

The script requires one parameter to pass specifying the metadata folder.
Secondly, you must specify at least one action (--check or --dest)
(examples assume that you are in the root of the repository):

  --check=THYS_DIR

    If you specify the 'thys' folder, the script will perform a check whether
    the entries in the metadata file corresponds to the folders in the filesystem.
    Example:

      admin/sitegen.py --check=thys metadata

    You might want to specify --no-warn when using --check if you're only interested
    in checking the rough structure of the metadata file.

  --dest=DEST_DIR

    If you specify a destination folder, the script will look for templates
    in the metadata folder and generate a corresponding file in the destination
    folder.
    Example:

      admin/sitegen.py --dest=/tmp/web metadata

You may wish to supply both --check and --dest.

The other parameters are optional. Provide --help to get an explanation.

  --no-warn
  
    Disable warnings. The script will occasionally complain about various things:
    
      * missing keys in metadata file
      * release of unknown entry
      * release matches no known Isabelle version (i. e. release is 'too early')
      
  --debug
  
    Enables debug output. Each generator will print its representation of the data.
